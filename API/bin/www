#!/usr/bin/env node

//Connect to mongoDB server
const mongoose = require("mongoose");
const dotenv = require('dotenv');
dotenv.config();

mongoose.connect("mongodb+srv://" + 
process.env.MONGO_ATLAS_USER +  ":" + process.env.MONGO_ATLAS_PW + "@winecluster-sijpk.mongodb.net/test?retryWrites=true&w=majority", { useNewUrlParser: true, useUnifiedTopology: true }, function(err, db) {
  if(!err)
    console.log("Connected as " + process.env.MONGO_ATLAS_USER);
  else
    console.log(err);
});

mongoose.set("useCreateIndex", true);
// PRINT DEBUG MONGODB
mongoose.set("debug", true);

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("winerecommender:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "8080");
app.set("port", port);
console.log("Server is listenning on port:" + port);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0 && port <= 65535) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string"
    ? "Pipe " + port
    : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;
  debug("Listening on " + bind);
}
